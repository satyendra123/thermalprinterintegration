using System;
using System.Collections.Generic;
using System.Drawing.Imaging;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Text;
using System.IO;

public class RawPrinterHelper
{
    [DllImport("winspool.Drv", EntryPoint = "OpenPrinterA", SetLastError = true)]
    static extern bool OpenPrinter(string pPrinterName, out IntPtr phPrinter, IntPtr pDefault);

    [DllImport("winspool.Drv", SetLastError = true)]
    static extern bool ClosePrinter(IntPtr hPrinter);

    [DllImport("winspool.Drv", SetLastError = true)]
    static extern bool StartDocPrinter(IntPtr hPrinter, int level, [In] ref DOCINFOA pDocInfo);

    [DllImport("winspool.Drv", SetLastError = true)]
    static extern bool EndDocPrinter(IntPtr hPrinter);

    [DllImport("winspool.Drv", SetLastError = true)]
    static extern bool StartPagePrinter(IntPtr hPrinter);

    [DllImport("winspool.Drv", SetLastError = true)]
    static extern bool EndPagePrinter(IntPtr hPrinter);

    [DllImport("winspool.Drv", SetLastError = true)]
    static extern bool WritePrinter(IntPtr hPrinter, IntPtr pBytes, int dwCount, out int dwWritten);

    [StructLayout(LayoutKind.Sequential)]
    public struct DOCINFOA
    {
        [MarshalAs(UnmanagedType.LPStr)]
        public string pDocName;

        [MarshalAs(UnmanagedType.LPStr)]
        public string pOutputFile;

        [MarshalAs(UnmanagedType.LPStr)]
        public string pDataType;
    }

    public static bool SendBytesToPrinter(string printerName, byte[] bytes)
    {
        IntPtr pPrinter;
        DOCINFOA docInfo = new DOCINFOA
        {
            pDocName = "Receipt Job",
            pDataType = "RAW"
        };

        if (OpenPrinter(printerName.Normalize(), out pPrinter, IntPtr.Zero))
        {
            if (StartDocPrinter(pPrinter, 1, ref docInfo))
            {
                if (StartPagePrinter(pPrinter))
                {
                    IntPtr unmanagedBytes = Marshal.AllocCoTaskMem(bytes.Length);
                    Marshal.Copy(bytes, 0, unmanagedBytes, bytes.Length);
                    WritePrinter(pPrinter, unmanagedBytes, bytes.Length, out _);
                    Marshal.FreeCoTaskMem(unmanagedBytes);
                    EndPagePrinter(pPrinter);
                }
                EndDocPrinter(pPrinter);
            }
            ClosePrinter(pPrinter);
            return true;
        }
        return false;
    }

    private static byte[] ConvertImageToRasterBytes(string imagePath)
    {
        using (Bitmap originalBmp = new Bitmap(imagePath))
        {
            Bitmap monoBmp = ConvertToMonochrome(originalBmp);
            int width = monoBmp.Width;
            int height = monoBmp.Height;
            int widthBytes = (width + 7) / 8;
            List<byte> escposData = new List<byte>();

            escposData.Add(0x1D);
            escposData.Add(0x76);
            escposData.Add(0x30);
            escposData.Add(0x00);
            escposData.Add((byte)(widthBytes % 256));
            escposData.Add((byte)(widthBytes / 256));
            escposData.Add((byte)(height % 256));
            escposData.Add((byte)(height / 256));

            for (int y = 0; y < height; y++)
            {
                for (int x = 0; x < widthBytes; x++)
                {
                    byte b = 0x00;
                    for (int bit = 0; bit < 8; bit++)
                    {
                        int pixelX = x * 8 + bit;
                        if (pixelX < width)
                        {
                            Color pixel = monoBmp.GetPixel(pixelX, y);
                            if (pixel.R == 0) // black pixel
                            {
                                b |= (byte)(1 << (7 - bit));
                            }
                        }
                    }
                    escposData.Add(b);
                }
            }

            return escposData.ToArray();
        }
    }

    // SAFE 1bpp Conversion Without Unsafe Code
    private static Bitmap ConvertToMonochrome(Bitmap input)
    {
        int width = input.Width;
        int height = input.Height;

        Bitmap mono = new Bitmap(width, height, PixelFormat.Format24bppRgb);

        using (Graphics g = Graphics.FromImage(mono))
        {
            g.Clear(Color.White);
            g.DrawImage(input, 0, 0, width, height);
        }

        for (int y = 0; y < height; y++)
        {
            for (int x = 0; x < width; x++)
            {
                Color pixel = mono.GetPixel(x, y);
                byte gray = (byte)((pixel.R * 0.3) + (pixel.G * 0.59) + (pixel.B * 0.11));
                Color newColor = gray < 128 ? Color.Black : Color.White;
                mono.SetPixel(x, y, newColor);
            }
        }

        return mono;
    }

    public static void PrintReceipt(string vehicleNumber, string vehicleType, string journeyType, string fee, string ticketNo, string operatorName)
    {
        string printerName = "POS80 Printer(2)";
        var encoding = Encoding.ASCII;
        var data = new List<byte>();

        // Initialize printer
        data.AddRange(new byte[] { 0x1B, 0x40 }); // ESC @

        // Add merged logo + text image
        try
        {
            string logoPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "logo.png");
            byte[] logoBytes = ConvertImageToRasterBytes(logoPath);
            data.AddRange(logoBytes);
            data.AddRange(new byte[] { 0x0A }); // Line feed
        }
        catch (Exception ex)
        {
            Console.WriteLine("Logo error: " + ex.Message);
        }

        data.AddRange(new byte[] { 0x1B, 0x4D, 0x01 });
        // ===== Header =====
        data.AddRange(encoding.GetBytes("\n"));
        data.AddRange(encoding.GetBytes("Toll Plaza Name  : Talapady Toll Plaza\n"));
        data.AddRange(encoding.GetBytes("                  (Km 16+600 on NH 16+600)\n"));
        data.AddRange(encoding.GetBytes("Section          : Nanthoor to Talapady\n"));
        data.AddRange(encoding.GetBytes("                  (Km 1+900 on NH 17+200)\n"));
        data.AddRange(encoding.GetBytes("Contractor's Name: Navayuga Udupi Tollway Pvt. Ltd.\n"));  // You can customize this line

        // ===== Ticket Info =====
        data.AddRange(encoding.GetBytes($"Ticket No       : {ticketNo}\n"));
        data.AddRange(encoding.GetBytes($"Booth & Operator: 6 & {operatorName}\n"));
        data.AddRange(encoding.GetBytes($"Date & Time     : {DateTime.Now:dd-MMM-yyyy hh:mm tt}\n"));
        data.AddRange(encoding.GetBytes($"Vehicle No      : {vehicleNumber}\n"));
        data.AddRange(encoding.GetBytes($"Type of Vehicle : {vehicleType}\n"));
        data.AddRange(encoding.GetBytes($"Type of Journey : {journeyType}\n"));
        data.AddRange(encoding.GetBytes($"Fee             : Rs {fee}\n"));

        // ===== Overload Section =====
        data.AddRange(encoding.GetBytes("\nOnly for overloaded vehicle\n"));
        data.AddRange(encoding.GetBytes("Standard Wt. of vehicle : \n"));
        data.AddRange(encoding.GetBytes("Actual Wt. of vehicle   : \n"));
        data.AddRange(encoding.GetBytes("Overloaded Vehicle Fee : \n"));

        // ===== Footer =====
        data.AddRange(new byte[] { 0x0A, 0x1B, 0x61, 0x01 }); // Line feed + Center align
        data.AddRange(encoding.GetBytes("WISH YOU SAFE & HAPPY JOURNEY!\n"));

        // Cut paper
        data.AddRange(new byte[] { 0x1D, 0x56, 0x00 }); // GS V 0 - full cut

        // Send to printer
        SendBytesToPrinter(printerName, data.ToArray());
    }

}
